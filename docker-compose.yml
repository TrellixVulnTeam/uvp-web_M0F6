x-shared-environment:
  &shared-environment # Pass to build environments and containers for all services
  APP_TITLE: &app-title "UVP Interactive"
  APP_DESCRIPTION: &app-description "Urban Video Project Interactive's web app"
  # dns
  DOMAIN:
  # postgres
  POSTGRES_HOST:
  POSTGRES_DB:
  POSTGRES_USER:
  POSTGRES_PASSWORD:
  # redis
  REDIS_URL:

services:
  proxy:
    image: traefik:v2.2
    container_name: proxy
    environment:
      <<: *shared-environment
    command:
      - --api.insecure=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/lets-encrypt/acme.json
    volumes:
      - ./traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 80:80
      - 443:443
    depends_on:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
      # HTTP Redirect
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.redirect-https.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.redirect-https.entrypoints=web
      - traefik.http.routers.redirect-https.middlewares=redirect-to-https

  frontend:
    container_name: frontend
    environment:
      <<: *shared-environment
      NODE_ENV: production
      VUE_APP_TITLE: *app-title
      VUE_APP_DESCRIPTION: *app-description
    build:
      context: ./frontend
      target: prod-stage
    ports:
      - 8080:8080
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls=true
      - traefik.http.routers.frontend.tls.certresolver=letsencrypt

  backend:
    container_name: backend
    environment:
      <<: *shared-environment
      # security
      DEBUG: 0
      SECRET_KEY:
      ALLOWED_HOSTS:
      BACKEND_CORS_ORIGINS:
      # email
      EMAILS_FROM_EMAIL: noreply@uvp.app
      SMTP_TLS: 1
      SMTP_PORT: 587
      SMTP_HOST:
      SMTP_USER:
      SMTP_PASSWORD:
    build:
      context: ./backend
      target: prod-stage
    command: ${BACKEND_CMD-}
    ports:
      - 8000:8000
    depends_on:
      - frontend
      - postgres
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/token`,`/api`,`/ws`,`/docs`,`/redoc`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.tls.certresolver=letsencrypt

  redis:
    image: redis:5-alpine
    container_name: redis
    environment:
      <<: *shared-environment

  postgres:
    image: postgres:13.1-alpine
    container_name: postgres
    environment:
      <<: *shared-environment
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      <<: *shared-environment
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_DEFAULT_EMAIL:
      PGADMIN_DEFAULT_PASSWORD:
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.routers.pgadmin.tls.certresolver=letsencrypt
      - traefik.http.services.pgadmin.loadbalancer.server.port=5050

volumes:
  postgres_data: null
